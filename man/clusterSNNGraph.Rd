% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/clusterSNNGraph.R
\name{clusterSNNGraph}
\alias{clusterSNNGraph}
\alias{clusterSNNGraph,ANY-method}
\alias{clusterSNNGraph,SummarizedExperiment-method}
\alias{clusterSNNGraph,SingleCellExperiment-method}
\alias{clusterKNNGraph}
\alias{clusterKNNGraph,ANY-method}
\alias{clusterKNNGraph,SummarizedExperiment-method}
\alias{clusterKNNGraph,SingleCellExperiment-method}
\title{Wrappers for graph-based clustering}
\usage{
clusterSNNGraph(x, ...)

\S4method{clusterSNNGraph}{ANY}(
  x,
  ...,
  clusterFUN = cluster_walktrap,
  transposed = FALSE,
  use.kmeans = FALSE,
  kmeans.centers = NULL,
  kmeans.args = list()
)

\S4method{clusterSNNGraph}{SummarizedExperiment}(x, ..., assay.type = "logcounts")

\S4method{clusterSNNGraph}{SingleCellExperiment}(x, ..., use.dimred = NULL)

clusterKNNGraph(x, ...)

\S4method{clusterKNNGraph}{ANY}(
  x,
  ...,
  clusterFUN = cluster_walktrap,
  transposed = FALSE,
  use.kmeans = FALSE,
  kmeans.centers = NULL,
  kmeans.args = list()
)

\S4method{clusterKNNGraph}{SummarizedExperiment}(x, ..., assay.type = "logcounts")

\S4method{clusterKNNGraph}{SingleCellExperiment}(x, ..., use.dimred = NULL)
}
\arguments{
\item{x}{A matrix-like object containing expression values for each gene (row) in each cell (column).
These dimensions can be transposed if \code{transposed=TRUE}.

Alternatively, a \linkS4class{SummarizedExperiment} or \linkS4class{SingleCellExperiment} containing such an expression matrix.

If \code{x} is a SingleCellExperiment and \code{use.dimred} is set,
graph building will be performed from its \code{\link{reducedDims}}.}

\item{...}{For the generics, additional arguments to pass to the specific methods.

For the ANY methods, additional arguments to pass to \code{\link{buildSNNGraph}} or \code{\link{buildKNNGraph}}.

For the SummarizedExperiment method, additional arguments to pass to the corresponding ANY method.

For the SingleCellExperiment method, additional arguments to pass to the corresponding SummarizedExperiment method.}

\item{clusterFUN}{Function that can take a \link{graph} object and return a \link{communities} object,
see examples in the \pkg{igraph} package.}

\item{transposed}{A logical scalar indicating whether \code{x} is transposed (i.e., rows are cells).}

\item{use.kmeans}{Logical scalar indicating whether k-means clustering should be performed.}

\item{kmeans.centers}{Integer scalar specifying the number of clusters to use for k-means clustering.
Defaults to the square root of the number of cells in \code{x}.}

\item{kmeans.args}{List containing additional named arguments to pass to \code{\link{kmeans}}.}

\item{assay.type}{A string specifying which assay values to use.}

\item{use.dimred}{A string specifying whether existing values in \code{reducedDims(x)} should be used.}
}
\value{
A factor containing the cluster assignment for each cell.
}
\description{
Perform graph-based clustering using community detection methods on a nearest-neighbor graph,
where nodes represent cells or k-means centroids.
}
\details{
By default, these functions simply call \code{\link{buildSNNGraph}} or \code{\link{buildKNNGraph}}
followed by the specified \code{clusterFUN} to generate a clustering.
We use the Walktrap algorithm by default as it has a cool-sounding name,
but users can feel free to swap it for some other algorithm (e.g., \code{\link{cluster_louvain}}).

For large datasets, we can perform vector quantization with k-means
to create centroids that are then subjected to graph-based clustering.
The label for each cell si then defined as the label of the centroid to which it was assigned.
In this approach, k-means and graph-based clustering complement each other;
the former improves computational efficiency and mitigates density-dependent dilation,
while the latter aggregates the centroids for easier interpretation.
}
\examples{
library(scater)
sce <- mockSCE(ncells=500)
sce <- logNormCounts(sce)

clusters <- clusterSNNGraph(sce)
table(clusters)

# Can pass usual arguments to buildSNNGraph:
clusters2 <- clusterSNNGraph(sce, k=5)
table(clusters2)

# Works with low-dimensional inputs:
sce <- runPCA(sce, ncomponents=10)
clusters3 <- clusterSNNGraph(sce, use.dimred="PCA")
table(clusters3)

# Turn on k-means for larger datasets, e.g., 
# assuming we already have a PCA result:
set.seed(101010)
bigpc <- matrix(rnorm(2000000), ncol=20)
clusters4 <- clusterSNNGraph(bigpc, d=NA, use.kmeans=TRUE, transposed=TRUE)
table(clusters4)

}
\seealso{
\code{\link{buildSNNGraph}} and \code{\link{buildKNNGraph}}, to build the nearest-neighbor graphs.

\code{\link{cluster_walktrap}} and related functions, to detect communities within those graphs.
}
\author{
Aaron Lun
}
